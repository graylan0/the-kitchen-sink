from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from numpy import pi

qreg_q = QuantumRegister(5, 'q')
creg_c = ClassicalRegister(5, 'c')
circuit = QuantumCircuit(qreg_q, creg_c)

# Quantum register for 5 qubits
# Classical register for measurement results
# Prepare initial state (equal superposition of all states)
circuit.h(qreg_q)
# Grover's algorithm loop unrolled (4 repetitions)
# Oracle and diffusion operator for the 1st repetition
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q)
circuit.x(qreg_q)
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q)
circuit.h(qreg_q)
# Grover's algorithm loop unrolled (4 repetitions)
# Oracle and diffusion operator for the 1st repetition
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q)
circuit.x(qreg_q)
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q)
circuit.h(qreg_q)
# Grover's algorithm loop unrolled (4 repetitions)
# Oracle and diffusion operator for the 1st repetition
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q)
circuit.x(qreg_q)
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q)
circuit.h(qreg_q)
# Grover's algorithm loop unrolled (4 repetitions)
# Oracle and diffusion operator for the 1st repetition
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q[0])
circuit.x(qreg_q[2])
circuit.x(qreg_q[3])
circuit.h(qreg_q)
circuit.x(qreg_q)
circuit.h(qreg_q[4])
circuit.ccx(qreg_q[0], qreg_q[1], qreg_q[4])
circuit.ccx(qreg_q[2], qreg_q[3], qreg_q[4])
circuit.h(qreg_q[4])
circuit.x(qreg_q)
circuit.h(qreg_q)
# Measurement
circuit.measure(qreg_q, creg_c)
